@using Newtonsoft.Json
@model Radikoj.Models.ParticipateViewModels.MapViewModel
@inject SharedViewLocalizer Localizer

@{
	ViewData["Title"] = Localizer["Participation"];
	var modelJson = JsonConvert.SerializeObject(Model!);
}

<div class="container is-fullhd" id="map-container">
	<p class="has-text-centered">@string.Format(Localizer["We have received {0} total responses from {1} different countries."], Model!.TotalResponses, Model.TotalCountries)</p>
	<div id="map"></div>
</div>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

<script>
	const geoJson = @Html.Raw(Model.GeoJson);

	let layer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
		attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
	});
	let map = new L.map('map', {
		minZoom: 2,
		zoom: 3,
		center: [25, 45],
		worldCopyJump: true
	});
	map.addLayer(layer);

	function randomColor() {
		const letters = '0123456789ABCDEF';
		let color = '#';
		for (let i = 0; i < 6; i++) {
			color += letters[Math.floor(Math.random() * 16)];
		}
		return color;
	}

	function style(feature) {
		return {
			fillColor: randomColor(),
			fillOpacity: 0.7,
			weight: 2,
			opacity: 1,
			color: 'lightblue',
			dashArray: '3'
		}
	}
	function onEachFeature(feature, layer) {
		layer.on({
			mouseover: setHighlight,
			mouseout: resetHighlight,
			click: zoomToFeature
		});
	}

	let geoLayer = L.geoJson(geoJson, { style: style, onEachFeature: onEachFeature }).addTo(map);
	
	let info = L.control();
	info.onAdd = function(map) {
		this._div = L.DomUtil.create('div', 'choropleth-info');
		this.update();
		return this._div;
	}
	info.update = function(props) {
		let html = '';
		if (props) {
			html = props.ADMIN + ': ' + props.Count + ' ' + (props.Count > 1 ? 'responses' : 'response');
		} else {
			html = 'Hover over a country';
		}
		this._div.innerHTML = html;
	}
	info.addTo(map);
	console.log(info);

	function setHighlight(e) {
		let layer = e.target;

		layer.setStyle({
			weight: 5,
			color: 'blue',
			dashArray: ''
		});

		info.update(layer.feature.properties);

		layer.bringToFront();
	}
	function resetHighlight(e) {
		info.update();
		geoLayer.resetStyle(e.target);
	}
	function zoomToFeature(e) {
		map.fitBounds(e.target.getBounds());
	}
</script>